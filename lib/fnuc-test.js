// Generated by CoffeeScript 1.10.0
(function() {
  var F, FN_TEST, Foo, Q, TYPES, TYPE_ARR, TYPE_NO_PROTO, TYPE_PLAIN, TYPE_PROTO, assert, chai, date, eql, foldfn, fuze, later, mock, sandbox, sinon, spy, stub,
    slice1 = [].slice;

  if (typeof browsertest !== "undefined" && browsertest !== null) {
    sinon = window.sinon;
    chai = window.chai;
    expect = window.chai.expect;
    F = window.F;
    Q = window.Q;
  } else {
    chai = require('chai');
    chai.use(require('sinon-chai'));
    sinon = require('sinon');
    F = require('../src/fnuc');
    Q = require('q');
    delete global.__fnuc;
    F.expose(global);
  }

  assert = chai.assert;

  eql = assert.deepEqual;

  later = function(f) {
    return (Q.Promise(function(rs) {
      return setTimeout(rs, 1);
    })).then(f);
  };

  fuze = function(v) {
    return Q.Promise(function(rs, rj) {
      return setTimeout((function() {
        return rj(v);
      }), 1);
    });
  };

  spy = sinon.spy, mock = sinon.mock, stub = sinon.stub, sandbox = sinon.sandbox;

  date = new Date(1421584085148);

  Foo = (function() {
    function Foo() {}

    return Foo;

  })();

  TYPES = [
    {
      v: void 0,
      t: 'undefined',
      d: '',
      truthy: false,
      func: false
    }, {
      v: null,
      t: 'null',
      d: '',
      truthy: false,
      func: false
    }, {
      v: false,
      t: 'boolean',
      d: '',
      truthy: false,
      func: false
    }, {
      v: true,
      t: 'boolean',
      d: '',
      truthy: true,
      func: false
    }, {
      v: '',
      t: 'string',
      d: '[empty]',
      truthy: false,
      func: String
    }, {
      v: 'str',
      t: 'string',
      d: '',
      truthy: true,
      func: String
    }, {
      v: 0,
      t: 'number',
      d: '[0]',
      truthy: false,
      func: Number
    }, {
      v: 42,
      t: 'number',
      d: '',
      truthy: true,
      func: Number
    }, {
      v: [],
      t: 'array',
      d: '[empty]',
      truthy: true,
      func: Array
    }, {
      v: [0, 1, {}],
      t: 'array',
      d: '',
      truthy: true,
      func: Array
    }, {
      v: date,
      t: 'date',
      d: '',
      truthy: true,
      func: Date
    }, {
      v: {},
      t: 'object',
      d: '[empty]',
      truthy: true,
      func: Object,
      plain: true
    }, {
      v: {
        a: 1,
        b: {}
      },
      t: 'object',
      d: '',
      truthy: true,
      func: Object,
      plain: true
    }, {
      v: new Foo,
      t: 'object',
      d: '[proto]',
      truthy: true,
      func: Object
    }, {
      v: {
        a: [
          {
            b: 1
          }
        ]
      },
      t: 'object',
      d: '',
      truthy: true,
      func: Object,
      plain: true
    }, {
      v: {
        a: [{}]
      },
      t: 'object',
      d: '',
      truthy: true,
      func: Object,
      plain: true
    }
  ];

  TYPE_PROTO = TYPES.filter(function(spec) {
    return spec.t === 'object' && !spec.plain;
  });

  TYPE_NO_PROTO = TYPES.filter(function(spec) {
    return spec.t !== 'object' || spec.plain;
  });

  TYPE_ARR = TYPES.filter(function(spec) {
    return spec.t === 'array';
  });

  TYPE_PLAIN = TYPES.filter(function(spec) {
    return spec.t === 'object' && spec.plain;
  });

  describe('type', function() {
    return describe('for 1 arg', function() {
      return TYPES.forEach(function(spec) {
        return it("works for " + spec.t + spec.d, function() {
          return eql(type(spec.v), spec.t);
        });
      });
    });
  });

  describe('typeis', function() {
    describe('works on the form (a,s)', function() {
      return TYPES.forEach(function(spec) {
        return it("for type " + spec.t + spec.d, function() {
          return eql(typeis(spec.v, spec.t), true);
        });
      });
    });
    return describe('works curried (s)(a)', function() {
      return TYPES.forEach(function(spec) {
        return it("for type " + spec.t + spec.d, function() {
          return eql(typeis(spec.t)(spec.v), true);
        });
      });
    });
  });

  describe('isplain', function() {
    return describe('tells whether something is a plain object', function() {
      return TYPES.forEach(function(spec) {
        return it("for type " + spec.t + spec.d, function() {
          return eql(isplain(spec.v), !!spec.plain);
        });
      });
    });
  });

  describe('merge', function() {
    return describe('alters first argument with consecutive and', function() {
      it('handles no object', function() {
        return eql(merge(), void 0);
      });
      it('handles one object', function() {
        return eql(merge({
          a: 1
        }), {
          a: 1
        });
      });
      it('handles two objects', function() {
        return eql(merge({
          a: 1
        }, {
          b: 2
        }), {
          a: 1,
          b: 2
        });
      });
      it('handles three objects', function() {
        return eql(merge({
          a: 1
        }, {
          b: 2
        }, {
          c: 3
        }), {
          a: 1,
          b: 2,
          c: 3
        });
      });
      it('overwrites existing keys', function() {
        return eql(merge({
          a: 1
        }, {
          a: 2
        }), {
          a: 2
        });
      });
      it('overwrites with precedence', function() {
        return eql(merge({
          a: 1
        }, {
          a: 2
        }, {
          a: 3
        }), {
          a: 3
        });
      });
      it('overwrites undefined values', function() {
        return eql(merge({
          a: 1
        }, {
          a: void 0
        }), {
          a: void 0
        });
      });
      return it('leaves undefined in first be', function() {
        return eql(merge({
          a: void 0
        }, {
          b: 2
        }), {
          a: void 0,
          b: 2
        });
      });
    });
  });

  describe('mixin', function() {
    return describe('returns a new object with all arguments merged and', function() {
      it('handles no object', function() {
        return eql(mixin(), {});
      });
      it('handles one object', function() {
        var a, r;
        eql((r = mixin(a = {
          a: 1
        })), {
          a: 1
        });
        return assert.ok(a !== r);
      });
      it('handles two objects', function() {
        var a;
        eql(mixin(a = {
          a: 1
        }, {
          b: 2
        }), {
          a: 1,
          b: 2
        });
        return eql(a, {
          a: 1
        });
      });
      it('handles three objects', function() {
        var a;
        eql(mixin(a = {
          a: 1
        }, {
          b: 2
        }, {
          c: 3
        }), {
          a: 1,
          b: 2,
          c: 3
        });
        return eql(a, {
          a: 1
        });
      });
      it('overwrites existing keys', function() {
        var a;
        eql(mixin(a = {
          a: 1
        }, {
          a: 2
        }), {
          a: 2
        });
        return eql(a, {
          a: 1
        });
      });
      it('overwrites with precedence', function() {
        var a;
        eql(mixin(a = {
          a: 1
        }, {
          a: 2
        }, {
          a: 3
        }), {
          a: 3
        });
        return eql(a, {
          a: 1
        });
      });
      it('overwrites undefined values', function() {
        var a;
        eql(mixin(a = {
          a: 1
        }, {
          a: void 0
        }), {
          a: void 0
        });
        return eql(a, {
          a: 1
        });
      });
      return it('leaves undefined in first be', function() {
        var a;
        eql(mixin(a = {
          a: void 0
        }, {
          b: 2
        }), {
          a: void 0,
          b: 2
        });
        return eql(a, {
          a: void 0
        });
      });
    });
  });

  describe('shallow', function() {
    describe('does a shallow copy', function() {
      return TYPE_NO_PROTO.forEach(function(spec) {
        return it("for built in type " + spec.t + spec.d, function() {
          var r;
          r = shallow(spec.v);
          return eql(r, spec.v);
        });
      });
    });
    describe('wont handle proto', function() {
      return TYPE_PROTO.forEach(function(spec) {
        return it('throws an exception', function() {
          return assert.throws((function() {
            return shallow(spec.v);
          }), 'Can\'t shallow [object Object]');
        });
      });
    });
    return describe('specifically', function() {
      describe('for arrays', function() {
        return TYPE_ARR.forEach(function(spec) {
          return it("copies nested by reference for " + spec.t + spec.d, function() {
            var a, i, j, len, r;
            r = shallow(spec.v);
            assert.ok(r !== spec.v);
            for (i = j = 0, len = r.length; j < len; i = ++j) {
              a = r[i];
              assert.ok(r[i] === spec.v[i]);
            }
            return eql(r.length, spec.v.length);
          });
        });
      });
      return describe('for objects', function() {
        return TYPE_PLAIN.forEach(function(spec) {
          return it("copies nested by reference for " + spec.t + spec.d, function() {
            var k, r, v;
            r = shallow(spec.v);
            assert.ok(r !== spec.v);
            for (k in r) {
              v = r[k];
              assert.ok(v === spec.v[k]);
            }
            return eql(Object.keys(r).length, Object.keys(spec.v).length);
          });
        });
      });
    });
  });

  describe('clone', function() {
    describe('does a deep copy', function() {
      return TYPE_NO_PROTO.forEach(function(spec) {
        return it("for built in type " + spec.t + spec.d, function() {
          var r;
          r = clone(spec.v);
          return eql(r, spec.v);
        });
      });
    });
    describe('wont handle proto', function() {
      return TYPE_PROTO.forEach(function(spec) {
        return it('throws an exception', function() {
          return assert.throws((function() {
            return clone(spec.v);
          }), 'Can\'t shallow [object Object]');
        });
      });
    });
    return describe('specifically', function() {
      describe('for arrays', function() {
        return TYPE_ARR.forEach(function(spec) {
          return it("clones nested for " + spec.t + spec.d, function() {
            var a, i, j, len, r;
            r = clone(spec.v);
            assert.ok(r !== spec.v);
            for (i = j = 0, len = r.length; j < len; i = ++j) {
              a = r[i];
              if (typeis(a, 'number')) {
                assert.ok(r[i] === spec.v[i]);
              } else {
                assert.ok(r[i] !== spec.v[i]);
              }
            }
            return eql(r.length, spec.v.length);
          });
        });
      });
      return describe('for objects', function() {
        return TYPE_PLAIN.forEach(function(spec) {
          return it("clones nested for " + spec.t + spec.d, function() {
            var k, r, v;
            r = clone(spec.v);
            assert.ok(r !== spec.v);
            for (k in r) {
              v = r[k];
              if (typeis(v, 'number')) {
                assert.ok(v === spec.v[k]);
              } else {
                assert.ok(v !== spec.v[k]);
              }
            }
            return eql(Object.keys(r).length, Object.keys(spec.v).length);
          });
        });
      });
    });
  });

  describe('arity', function() {
    it('returns the arity of (f)', function() {
      eql(arityof(function() {}), 0);
      eql(arityof(function(a) {}), 1);
      return eql(arityof(function(a, b) {}), 2);
    });
    it('chops the arity to the given number if (f,n)', function() {
      var j, n, results;
      results = [];
      for (n = j = 0; j <= 10; n = ++j) {
        results.push(eql(arityof(arity((function(a, b, c) {}), n)), n));
      }
      return results;
    });
    it('has a curried variant for (n)', function() {
      var j, n, results;
      results = [];
      for (n = j = 0; j <= 10; n = ++j) {
        results.push(eql(arityof(arity(n)(function(a, b, c) {})), n));
      }
      return results;
    });
    describe('unary', function() {
      return it('is arity(1)', function() {
        var f;
        f = unary((function(a, b, c, d, e) {}));
        return eql(f.length, 1);
      });
    });
    describe('binary', function() {
      return it('is arity(2)', function() {
        var f;
        f = binary(function(a, b, c, d, e) {});
        return eql(f.length, 2);
      });
    });
    return describe('ternary', function() {
      return it('is arity(3)', function() {
        var f;
        f = ternary(function(a, b, c, d, e) {});
        return eql(f.length, 3);
      });
    });
  });

  describe('partial', function() {
    return describe('partially fills in arguments from the left', function() {
      it('executes arity(0)', function() {
        var r;
        r = partial((function() {
          return 42;
        }));
        return eql(r, 42);
      });
      it('executes arity(0) with arguments', function() {
        var r;
        r = partial((function() {
          return 42;
        }), 1, 2, 3);
        return eql(r, 42);
      });
      it('handles arity(1)', function() {
        var r;
        r = partial((function(a) {
          return a + 42;
        }));
        assert.isFunction(r);
        return eql(r(1, 2, 3), 43);
      });
      it('executes arity(1) with arguments', function() {
        var r;
        r = partial((function(a) {
          return a + 42;
        }), 1, 2);
        assert.isNotFunction(r);
        return eql(r, 43);
      });
      it('works for arity(2)', function() {
        var r;
        r = partial((function(a, b) {
          return a / b;
        }), 42);
        assert.isFunction(r);
        eql(arityof(r), 1);
        return eql(r(2, 3, 4), 21);
      });
      it('executes arity(2) with arguments', function() {
        var r;
        r = partial((function(a, b) {
          return a / b;
        }), 42, 2);
        assert.isNotFunction(r);
        return eql(r, 21);
      });
      return describe('for arity(3)', function() {
        it('works with one arg', function() {
          var r;
          r = partial((function(a, b, c) {
            return a / (b / c);
          }), 12);
          assert.isFunction(r);
          eql(arityof(r), 2);
          return eql(r(3, 2, 5), 8);
        });
        it('produces a curried function', function() {
          var r;
          r = partial((function(a, b, c) {
            return a / (b / c);
          }), 12);
          return eql(r(2)(3), 8);
        });
        it('works with two arg', function() {
          var r;
          r = partial((function(a, b, c) {
            return a / (b / c);
          }), 12, 3);
          assert.isFunction(r);
          eql(arityof(r), 1);
          return eql(r(2, 5), 8);
        });
        return it('executes with arguments', function() {
          var r;
          r = partial((function(a, b, c) {
            return a / (b / c);
          }), 12, 3, 2, 5);
          assert.isNotFunction(r);
          return eql(r, 8);
        });
      });
    });
  });

  describe('partialr', function() {
    return describe('partially fills in arguments from the right', function() {
      it('executes arity(0)', function() {
        var r;
        r = partialr((function() {
          return 42;
        }));
        return eql(r, 42);
      });
      it('executes arity(0) with arguments', function() {
        var r;
        r = partialr((function() {
          return 42;
        }), 1, 2, 3);
        return eql(r, 42);
      });
      it('handles arity(1)', function() {
        var r;
        r = partialr((function(a) {
          return a + 42;
        }));
        assert.isFunction(r);
        return eql(r(1, 2, 3), 43);
      });
      it('executes arity(1) with arguments', function() {
        var r;
        r = partialr((function(a) {
          return a + 42;
        }), 1, 2);
        assert.isNotFunction(r);
        return eql(r, 43);
      });
      it('works for arity(2)', function() {
        var r;
        r = partialr((function(a, b) {
          return a / b;
        }), 2);
        assert.isFunction(r);
        eql(arityof(r), 1);
        return eql(r(42, 3, 4), 21);
      });
      it('executes arity(2) with arguments', function() {
        var r;
        r = partialr((function(a, b) {
          return a / b;
        }), 42, 2);
        assert.isNotFunction(r);
        return eql(r, 21);
      });
      return describe('for arity(3)', function() {
        it('works with one arg', function() {
          var r;
          r = partialr((function(a, b, c) {
            return a / (b / c);
          }), 2);
          assert.isFunction(r);
          eql(arityof(r), 2);
          return eql(r(12, 3, 5), 8);
        });
        it('produces a curried function', function() {
          var r;
          r = partialr((function(a, b, c) {
            return a / (b / c);
          }), 2);
          return eql(r(3)(12), 8);
        });
        it('works with two arg', function() {
          var r;
          r = partialr((function(a, b, c) {
            return a / (b / c);
          }), 3, 2);
          assert.isFunction(r);
          eql(arityof(r), 1);
          return eql(r(12, 5), 8);
        });
        return it('executes with arguments', function() {
          var r;
          r = partialr((function(a, b, c) {
            return a / (b / c);
          }), 12, 3, 2, 5);
          assert.isNotFunction(r);
          return eql(r, 8);
        });
      });
    });
  });

  describe('curry', function() {
    it('does nothing for arity(f) == 0', function() {
      var f, g;
      f = function() {};
      g = curry(f);
      return assert.ok(g === f);
    });
    it('does nothing for arity(f) == 1', function() {
      var f, g;
      f = function(n) {};
      g = curry(f);
      return assert.ok(g === f);
    });
    describe('(a,b) ->', function() {
      var div;
      div = curry(function(a, b) {
        return a / b;
      });
      it('turns to (b) -> (a) ->', function() {
        var div2;
        div2 = div(2);
        return eql(div2(10), 5);
      });
      it('maintains arity for curried func', function() {
        return eql(arityof(div), 2);
      });
      it('returns a smaller arity func after partial apply', function() {
        var div2;
        div2 = div(2);
        return eql(arityof(div2), 1);
      });
      return it('can still apply (a,b) to curried (a,b) ->', function() {
        return eql(div(10, 2), 5);
      });
    });
    return describe('(a,b,c) ->', function() {
      var divt;
      divt = curry(function(a, b, c) {
        return a / (b / c);
      });
      it('turns to (c) -> (b) -> (a) ->', function() {
        var div2, div4;
        div2 = divt(2);
        div4 = div2(8);
        return eql(div4(80), 20);
      });
      it('maintains arity for curried func', function() {
        return eql(arityof(divt), 3);
      });
      it('returns a small arity func after partial apply', function() {
        var div2, div4;
        div2 = divt(2);
        div4 = div2(8);
        eql(arityof(div2), 2);
        return eql(arityof(div4), 1);
      });
      it('can be partially applied with (b,c)', function() {
        var div4;
        div4 = divt(8, 2);
        return eql(div4(80), 20);
      });
      it('does correct arity for partial applied', function() {
        var div4;
        div4 = divt(8, 2);
        return eql(arityof(div4), 1);
      });
      it('can still apply (a,b,c) to curried (a,b,c) ->', function() {
        return eql(divt(80, 8, 2), 20);
      });
      it('can apply (b,c) to partial applied curried (a,b,c) ->', function() {
        var div2;
        div2 = divt(2);
        return eql(div2(80, 8), 20);
      });
      return it('doesnt splice in more arguments for a partially applied', function() {
        var div2;
        div2 = divt(2);
        return eql(div2(100, 25, 4), 8);
      });
    });
  });

  describe('flip', function() {
    describe('(a,b) ->', function() {
      var f, f1;
      f = flip((f1 = function(a, b) {
        return a / b;
      }));
      it('flips the arguments to (b,a) ->', function() {
        return eql(f(2, 10), 5);
      });
      it('keeps arity', function() {
        return eql(arityof(f), 2);
      });
      it('is commutative', function() {
        return assert.ok(flip(f) === f1);
      });
      it('flips curried functions', function() {
        f = flip(curry(function(a, b) {
          return a / b;
        }));
        eql(f(2, 10), 5);
        return eql(f(10)(2), 5);
      });
      it('is commutative for curried functions', function() {
        f = flip((f1 = curry(function(a, b) {
          return a / b;
        })));
        return assert.ok(flip(f) === f1);
      });
      it('flips partially applied curried functions', function() {
        f = flip((curry(function(a, b) {
          return a / b;
        }))(2));
        return eql(f(8), 4);
      });
      return it('is commutative for partially applied curried functions', function() {
        f = flip((f1 = (curry(function(a, b) {
          return a / b;
        }))(2)));
        return assert.ok(flip(f), f1);
      });
    });
    return describe('(a,b,c) ->', function() {
      var f, f1;
      f = flip((f1 = function(a, b, c) {
        return a / (b / c);
      }));
      it('flips the arguments to (c,b,a) ->', function() {
        return eql(f(2, 3, 12), 8);
      });
      it('keeps arity', function() {
        return eql(arityof(f), 3);
      });
      it('is commutative', function() {
        return eql(flip(f), f1);
      });
      it('flips curried functions', function() {
        f = flip(curry(function(a, b, c) {
          return a / (b / c);
        }));
        eql(f(2, 3, 12), 8);
        return eql(f(12)(3)(2), 8);
      });
      it('is commutative for curried functions', function() {
        f = flip((f1 = curry(function(a, b, c) {
          return a / (b / c);
        })));
        return assert.ok(flip(f) === f1);
      });
      it('flips partially applied curried functions', function() {
        f = flip((curry(function(a, b, c) {
          return a / (b / c);
        }))(2));
        eql(f(3, 12), 8);
        return eql(f(12)(3), 8);
      });
      return it('is commutative partially applied curried functions', function() {
        f = flip((f1 = (curry(function(a, b, c) {
          return a / (b / c);
        }))(2)));
        return assert.ok(flip(f) === f1);
      });
    });
  });

  describe('compose', function() {
    describe('(f2,f1)', function() {
      var f, f1, f2;
      f1 = function(a, b) {
        return a + b;
      };
      f2 = function(c) {
        return c / 2;
      };
      f = compose(f2, f1);
      it('is turned to f2(f1)', function() {
        return eql(f(6, 4), 5);
      });
      return it('maintains arity for f1', function() {
        return eql(arityof(f), 2);
      });
    });
    return describe('(f3,f2,f1)', function() {
      var f, f1, f2, f3;
      f1 = function(a, b) {
        return a + b;
      };
      f2 = function(c) {
        return c / 2;
      };
      f3 = function(d) {
        return d / 3;
      };
      f = compose(f3, f2, f1);
      it('is turned to f3(f2(f1))', function() {
        return eql(f(7, 5), 2);
      });
      it('maintains arity for f1', function() {
        return eql(arityof(f), 2);
      });
      return it('composes vararg funs', function(done) {
        var fn;
        fn = compose(function() {
          var as;
          as = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
          eql(as, [1, 2, 3]);
          return done();
        });
        return fn(1, 2, 3);
      });
    });
  });

  describe('pipe', function() {
    describe('(f1,f2)', function() {
      var calc, f1, f2;
      f1 = function(a, b) {
        return a + b;
      };
      f2 = div(10);
      calc = pipe(f1, f2);
      it('is turned to f2(f1)', function() {
        return eql(calc(6, 4), 1);
      });
      it('maintains arity for f1', function() {
        return eql(arityof(calc), 2);
      });
      it('allows promises as arg', function() {
        return calc(later(function() {
          return 10;
        }), 20).then(function(v) {
          return eql(v, 3);
        });
      });
      it('can take promises as result of pipe steps', function() {
        var addl, calcl;
        addl = function(a, b) {
          return later(function() {
            return a + b;
          });
        };
        calcl = pipe(addl, f2);
        return calcl(10, 20).then(function(v) {
          return eql(v, 3);
        });
      });
      return it('pipes vararg funs', function(done) {
        var fn;
        fn = pipe(function() {
          var as;
          as = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
          eql(as, [1, 2, 3]);
          return done();
        });
        return fn(1, 2, 3);
      });
    });
    describe('(f1,f2,f3)', function() {
      var f, f1, f2, f3;
      f1 = function(a, b) {
        return a + b;
      };
      f2 = function(c) {
        return c / 2;
      };
      f3 = function(d) {
        return d / 3;
      };
      f = pipe(f1, f2, f3);
      it('is turned to f3(f2(f1))', function() {
        return eql(f(7, 5), 2);
      });
      it('maintains arity for f1', function() {
        return eql(arityof(f), 2);
      });
      return it('maintains arity 0 for f1, even though it hurts', function() {
        var f0;
        f0 = function() {};
        eql(arityof(f0), 0);
        return eql(arityof(pipe(f0)), 0);
      });
    });
    return describe('(f1,f2,pfail,f3)', function() {
      var f, f1, f2, f3, pf;
      f1 = function(a, b) {
        return a + b;
      };
      f2 = function(a) {
        return a / 2;
      };
      f3 = function(a) {
        return "f3 " + a;
      };
      pf = pfail(function(err) {
        return "did " + err;
      });
      f = pipe(f1, f2, pf, f3);
      it('ignores pfail when no rejected promise', function() {
        return f(Q(7), 3).then(function(r) {
          return eql(r, 'f3 5');
        });
      });
      it('invokes pfail if invoked with rejected promise', function() {
        return f(fuze('reject'), 3).then(function(r) {
          return eql(r, 'f3 did reject');
        });
      });
      return it('invokes pfail if any function introduces a rejected promise', function() {
        var f2e, fe;
        f2e = function(a) {
          return fuze('reject');
        };
        fe = pipe(f1, f2e, pf, f3);
        return fe(7, 3).then(function(r) {
          return eql(r, 'f3 did reject');
        });
      });
    });
  });

  describe('I', function() {
    it('returns the arg in', function() {
      return eql(I(42), 42);
    });
    it('is of arity 1', function() {
      return eql(arityof(I), 1);
    });
    return it('ignores additional args', function() {
      return eql(I(42, 2), 42);
    });
  });

  describe('tap', function() {
    var f;
    f = spy(I);
    it('is the mother of all side effect funcs', function() {
      eql(tap(42, f), 42);
      return eql(f.args[0], [42]);
    });
    it('is curried', function() {
      return eql(tap(f)(42), 42);
    });
    return it('has arity 2', function() {
      return eql(tap.length, 2);
    });
  });

  foldfn = function(p, c) {
    return p + c / p;
  };

  FN_TEST = [
    {
      n: 'head',
      s: '[] -> undef',
      f: head,
      ar: 1,
      as: [[]],
      eq: void 0
    }, {
      n: 'head',
      s: '[a] -> a',
      f: head,
      ar: 1,
      as: [[1, 2, 3]],
      eq: 1
    }, {
      n: 'tail',
      s: '[] -> []',
      f: tail,
      ar: 1,
      as: [[]],
      eq: []
    }, {
      n: 'tail',
      s: '[a] -> [a]',
      f: tail,
      ar: 1,
      as: [[1, 2, 3]],
      eq: [2, 3]
    }, {
      n: 'last',
      s: '[] -> undef',
      f: last,
      ar: 1,
      as: [[]],
      eq: void 0
    }, {
      n: 'last',
      s: '[a] -> a',
      f: last,
      ar: 1,
      as: [[1, 2, 3]],
      eq: 3
    }, {
      n: 'head',
      s: '"" -> undef',
      f: head,
      ar: 1,
      as: [""],
      eq: void 0
    }, {
      n: 'head',
      s: 's -> s',
      f: head,
      ar: 1,
      as: ["123"],
      eq: "1"
    }, {
      n: 'tail',
      s: '"" -> ""',
      f: tail,
      ar: 1,
      as: [""],
      eq: ""
    }, {
      n: 'tail',
      s: 's -> s',
      f: tail,
      ar: 1,
      as: ["123"],
      eq: "23"
    }, {
      n: 'last',
      s: '"" -> undef',
      f: last,
      ar: 1,
      as: [""],
      eq: void 0
    }, {
      n: 'last',
      s: 's -> a',
      f: last,
      ar: 1,
      as: ["123"],
      eq: "3"
    }, {
      n: 'lastfn',
      s: '[a], fn -> a',
      f: lastfn,
      ar: 2,
      as: [
        [1, 2, 3, 4], (function(a) {
          return a % 2;
        })
      ],
      eq: 3
    }, {
      n: 'concat',
      s: 'a, a -> [a]',
      f: concat,
      ar: 2,
      as: [0, 1, 2, 3],
      eq: [0, 1, 2, 3]
    }, {
      n: 'concat',
      s: '[a], a -> [a]',
      f: concat,
      ar: 2,
      as: [[0, 1], 2],
      eq: [0, 1, 2]
    }, {
      n: 'concat',
      s: 'a, [a] -> [a]',
      f: concat,
      ar: 2,
      as: [0, 1, [2, 3]],
      eq: [0, 1, 2, 3]
    }, {
      n: 'concat',
      s: '[a], [a] -> [a]',
      f: concat,
      ar: 2,
      as: [[0, 1], [2, 3]],
      eq: [0, 1, 2, 3]
    }, {
      n: 'each',
      s: '[a], fn -> undef',
      f: each,
      ar: 2,
      as: [
        [0, 1, 2], (function(a) {
          return a + 1;
        })
      ],
      eq: void 0
    }, {
      n: 'map',
      s: '[a], fn -> [a]',
      f: map,
      ar: 2,
      as: [
        [0, 1, 2], (function(a) {
          return a + 1;
        })
      ],
      eq: [1, 2, 3]
    }, {
      n: 'filter',
      s: '[a], fn -> [a]',
      f: filter,
      ar: 2,
      as: [
        [0, 1, 2], (function(a) {
          return a % 2;
        })
      ],
      eq: [1]
    }, {
      n: 'firstfn',
      s: '[a], fn -> a',
      f: firstfn,
      ar: 2,
      as: [
        [0, 1, 2, 3], (function(a) {
          return a % 2;
        })
      ],
      eq: 1
    }, {
      n: 'fold',
      s: '[a], fn, v -> *',
      f: fold,
      ar: 3,
      as: [[24, 28], foldfn, 12],
      eq: 16
    }, {
      n: 'fold1',
      s: '[a], fn -> *',
      f: fold1,
      ar: 2,
      as: [[12, 24, 28], foldfn],
      eq: 16
    }, {
      n: 'foldr',
      s: '[a], fn, v -> *',
      f: foldr,
      ar: 3,
      as: [[28, 24], foldfn, 12],
      eq: 16
    }, {
      n: 'foldr1',
      s: '[a], fn -> *',
      f: foldr1,
      ar: 2,
      as: [[28, 24, 12], foldfn],
      eq: 16
    }, {
      n: 'all',
      s: '[a], fn -> b',
      f: all,
      ar: 2,
      as: [
        [0, 1, 2], (function(a) {
          return a >= 0;
        })
      ],
      eq: true
    }, {
      n: 'any',
      s: '[a], fn -> b',
      f: any,
      ar: 2,
      as: [
        [0, 1, 2], (function(a) {
          return a > 1;
        })
      ],
      eq: true
    }, {
      n: 'join',
      s: '[a], s -> s',
      f: join,
      ar: 2,
      as: [[0, 1, 2], '-'],
      eq: '0-1-2'
    }, {
      n: 'reverse',
      s: '[a] -> [a]',
      f: reverse,
      ar: 1,
      as: [[0, 1, 2]],
      eq: [2, 1, 0]
    }, {
      n: 'split',
      s: 's, s -> s',
      f: split,
      ar: 2,
      as: ['a#b', '#'],
      eq: ['a', 'b']
    }, {
      n: 'match',
      s: 's, re -> null',
      f: match,
      ar: 2,
      as: ['abc', 'd'],
      eq: null
    }, {
      n: 'match',
      s: 's, s -> [s]',
      f: match,
      ar: 2,
      as: ['abc', 'b'],
      eq: 'abc'.match('b')
    }, {
      n: 'match',
      s: 's, re -> [s]',
      f: match,
      ar: 2,
      as: ['abc', /b/],
      eq: 'abc'.match(/b/)
    }, {
      n: 'replace',
      s: 's, s, s -> s',
      f: replace,
      ar: 3,
      as: ['aba', 'a', 'b'],
      eq: 'bba'
    }, {
      n: 'replace',
      s: 's, re, s -> s',
      f: replace,
      ar: 3,
      as: ['aba', /a/g, 'b'],
      eq: 'bbb'
    }, {
      n: 'search',
      s: 's, s -> b',
      f: search,
      ar: 2,
      as: ['aaaca', 'c'],
      eq: 3
    }, {
      n: 'search',
      s: 's, re -> b',
      f: search,
      ar: 2,
      as: ['aaaca', /ac/],
      eq: 2
    }, {
      n: 'slice',
      s: 's, n, n -> s',
      f: slice,
      ar: 3,
      as: ['abcdef', 1, 3],
      eq: 'bc'
    }, {
      n: 'drop',
      s: 's, n -> s',
      f: drop,
      ar: 2,
      as: ['abcdef', 2],
      eq: 'cdef'
    }, {
      n: 'take',
      s: 's, n -> s',
      f: take,
      ar: 2,
      as: ['abcdef', 2],
      eq: 'ab'
    }, {
      n: 'trim',
      s: 's -> s',
      f: trim,
      ar: 1,
      as: ['  abc '],
      eq: 'abc'
    }, {
      n: 'ucase',
      s: 's -> s',
      f: ucase,
      ar: 1,
      as: ['abc'],
      eq: 'ABC'
    }, {
      n: 'lcase',
      s: 's -> s',
      f: lcase,
      ar: 1,
      as: ['ABC'],
      eq: 'abc'
    }, {
      n: 'sort',
      s: '[a], f -> [a]',
      f: sort,
      ar: 2,
      as: [[2, 3, 1], void 0],
      eq: [1, 2, 3]
    }, {
      n: 'sort',
      s: '[a], f -> [a]',
      f: sort,
      ar: 2,
      as: [
        [2, 3, 1], function(a, b) {
          return b - a;
        }
      ],
      eq: [3, 2, 1]
    }, {
      n: 'uniq',
      s: 'null -> null',
      f: uniq,
      ar: 1,
      as: [null],
      eq: null
    }, {
      n: 'uniq',
      s: '[a] -> [a]',
      f: uniq,
      ar: 1,
      as: [[]],
      eq: []
    }, {
      n: 'uniq',
      s: '[a] -> [a]',
      f: uniq,
      ar: 1,
      as: [[1, 2, 2, 1, 2, 3]],
      eq: [1, 2, 3]
    }, {
      n: 'uniqfn',
      s: 'null -> null',
      f: uniqfn,
      ar: 2,
      as: [null, I],
      eq: null
    }, {
      n: 'uniqfn',
      s: '[a] -> [a]',
      f: uniqfn,
      ar: 2,
      as: [[], I],
      eq: []
    }, {
      n: 'uniqfn',
      s: '[a] -> [a]',
      f: uniqfn,
      ar: 2,
      as: [
        [1, 4, 2, 1, 2, 3], function(a) {
          return a % 2;
        }
      ],
      eq: [1, 4]
    }, {
      n: 'index',
      s: '[a], a -> n',
      f: index,
      ar: 2,
      as: [[1, 2, 3, 4], 3],
      eq: 2
    }, {
      n: 'index',
      s: '[a], a -> n',
      f: index,
      ar: 2,
      as: [[1, 2, 3, 4], 5],
      eq: -1
    }, {
      n: 'indexfn',
      s: '[a], fn -> n',
      f: indexfn,
      ar: 2,
      as: [
        [1, 2, 3, 4], function(a) {
          return a % 2 === 0;
        }
      ],
      eq: 1
    }, {
      n: 'indexfn',
      s: '[a], fn -> n',
      f: indexfn,
      ar: 2,
      as: [
        [1, 2, 3, 4], function(a) {
          return a > 4;
        }
      ],
      eq: -1
    }, {
      n: 'contains',
      s: '[a], a -> b',
      f: contains,
      ar: 2,
      as: [[1, 2, 3, 4], 3],
      eq: true
    }, {
      n: 'contains',
      s: '[a], a -> b',
      f: contains,
      ar: 2,
      as: [[1, 2, 3, 4], 5],
      eq: false
    }, {
      n: 'has',
      s: '{k:v}, k -> b',
      f: has,
      ar: 2,
      as: [
        {
          a: 1,
          b: 2
        }, 'b'
      ],
      eq: true
    }, {
      n: 'get',
      s: '{k:v}, k -> v',
      f: get,
      ar: 2,
      as: [
        {
          a: 1,
          b: 2
        }, 'b'
      ],
      eq: 2
    }, {
      n: 'set',
      s: '{k:v}, k, v -> v',
      f: set,
      ar: 3,
      as: [
        {
          a: 1,
          b: 2
        }, 'b', 3
      ],
      eq: {
        a: 1,
        b: 3
      }
    }, {
      n: 'keys',
      s: '{k:v} -> [k]',
      f: keys,
      ar: 1,
      as: [
        {
          a: 1,
          b: 2
        }
      ],
      eq: ['a', 'b']
    }, {
      n: 'values',
      s: '{k:v} -> [v]',
      f: values,
      ar: 1,
      as: [
        {
          a: 1,
          b: 2
        }
      ],
      eq: [1, 2]
    }, {
      n: 'add',
      s: 'a, a -> a',
      f: add,
      ar: 2,
      as: [12, 2],
      eq: 14
    }, {
      n: 'add',
      s: 'a... -> a',
      f: add,
      ar: 2,
      as: [12, 2, 3],
      eq: 17
    }, {
      n: 'sub',
      s: 'a, a -> a',
      f: sub,
      ar: 2,
      as: [12, 2],
      eq: 10
    }, {
      n: 'sub',
      s: 'a... -> a',
      f: sub,
      ar: 2,
      as: [12, 2, 3],
      eq: 7
    }, {
      n: 'mul',
      s: 'a, a -> a',
      f: mul,
      ar: 2,
      as: [12, 2],
      eq: 24
    }, {
      n: 'mul',
      s: 'a... -> a',
      f: mul,
      ar: 2,
      as: [12, 2, 3],
      eq: 72
    }, {
      n: 'div',
      s: 'a, a -> a',
      f: div,
      ar: 2,
      as: [12, 2],
      eq: 6
    }, {
      n: 'div',
      s: 'a... -> a',
      f: div,
      ar: 2,
      as: [12, 2, 3],
      eq: 2
    }, {
      n: 'mod',
      s: 'a, a -> a',
      f: mod,
      ar: 2,
      as: [17, 6],
      eq: 5
    }, {
      n: 'mod',
      s: 'a... -> a',
      f: mod,
      ar: 2,
      as: [17, 6, 3],
      eq: 2
    }, {
      n: 'min',
      s: 'a, a -> a',
      f: min,
      ar: 2,
      as: [12, 2],
      eq: 2
    }, {
      n: 'min',
      s: 'a... -> a',
      f: min,
      ar: 2,
      as: [12, 3, 2],
      eq: 2
    }, {
      n: 'max',
      s: 'a, a -> a',
      f: max,
      ar: 2,
      as: [12, 2],
      eq: 12
    }, {
      n: 'max',
      s: 'a... -> a',
      f: max,
      ar: 2,
      as: [3, 2, 12],
      eq: 12
    }, {
      n: 'gt',
      s: 'a, a -> a',
      f: gt,
      ar: 2,
      as: [12, 11],
      eq: true
    }, {
      n: 'gt',
      s: 'a, a -> a',
      f: gt,
      ar: 2,
      as: [12, 12],
      eq: false
    }, {
      n: 'gte',
      s: 'a, a -> a',
      f: gte,
      ar: 2,
      as: [12, 12],
      eq: true
    }, {
      n: 'gte',
      s: 'a, a -> a',
      f: gte,
      ar: 2,
      as: [12, 13],
      eq: false
    }, {
      n: 'lt',
      s: 'a, a -> a',
      f: lt,
      ar: 2,
      as: [11, 12],
      eq: true
    }, {
      n: 'lt',
      s: 'a, a -> a',
      f: lt,
      ar: 2,
      as: [12, 12],
      eq: false
    }, {
      n: 'lte',
      s: 'a, a -> a',
      f: lte,
      ar: 2,
      as: [12, 12],
      eq: true
    }, {
      n: 'lte',
      s: 'a, a -> a',
      f: lte,
      ar: 2,
      as: [13, 12],
      eq: false
    }, {
      n: 'eq',
      s: 'a, a -> b',
      f: eq,
      ar: 2,
      as: [0, 0],
      eq: true
    }, {
      n: 'eq',
      s: 'a, a -> b',
      f: eq,
      ar: 2,
      as: [1, 0],
      eq: false
    }, {
      n: 'eq',
      s: 'a, a -> b',
      f: eq,
      ar: 2,
      as: [{}, {}],
      eq: false
    }, {
      n: 'eq',
      s: 'a... -> b',
      f: eq,
      ar: 2,
      as: [1, 1, 2],
      eq: false
    }, {
      n: 'eq',
      s: 'a... -> b',
      f: eq,
      ar: 2,
      as: [false, false, false],
      eq: true
    }, {
      n: 'eq',
      s: 'a... -> b',
      f: eq,
      ar: 2,
      as: [0, 0, 1],
      eq: false
    }, {
      n: 'and',
      s: 'a, a -> b',
      f: aand,
      ar: 2,
      as: [12, 2],
      eq: true
    }, {
      n: 'and',
      s: 'a, a -> b',
      f: aand,
      ar: 2,
      as: [12, null],
      eq: false
    }, {
      n: 'and',
      s: 'a, a, a -> b',
      f: aand,
      ar: 2,
      as: [12, 1, 0],
      eq: false
    }, {
      n: 'or',
      s: 'a, a -> b',
      f: oor,
      ar: 2,
      as: [12, 2],
      eq: true
    }, {
      n: 'or',
      s: 'a, a -> b',
      f: oor,
      ar: 2,
      as: [12, null],
      eq: true
    }, {
      n: 'or',
      s: 'a, a, a -> b',
      f: oor,
      ar: 2,
      as: [null, null, 4],
      eq: true
    }, {
      n: 'not',
      s: 'a -> b',
      f: nnot,
      ar: 1,
      as: [12],
      eq: false
    }, {
      n: 'not',
      s: 'a -> b',
      f: nnot,
      ar: 1,
      as: [null],
      eq: true
    }, {
      n: 'pick',
      s: '{k:v}, [k] -> {k:v}',
      f: pick,
      ar: 2,
      as: [
        {
          a: 1,
          b: 2,
          c: 3
        }, ['b', 'c']
      ],
      eq: {
        b: 2,
        c: 3
      }
    }, {
      n: 'pick',
      s: '{k:v}, k -> {k:v}',
      f: pick,
      ar: 2,
      as: [
        {
          a: 1,
          b: 2,
          c: 3
        }, 'b', 'c'
      ],
      eq: {
        b: 2,
        c: 3
      }
    }, {
      n: 'pick',
      s: '{k:v}, k -> {k:v}',
      f: pick,
      ar: 2,
      as: [
        {
          a: 1,
          b: 2,
          c: 3
        }, 'b'
      ],
      eq: {
        b: 2
      }
    }, {
      n: 'omap',
      s: '{k:v}, ((k,v) -> v) -> {k:v}',
      f: omap,
      ar: 2,
      as: [
        {
          a: 1,
          b: 2,
          c: 3
        }, function(k, v) {
          if (k === 'b') {
            return v + 40;
          } else {
            return v;
          }
        }
      ],
      eq: {
        a: 1,
        b: 42,
        c: 3
      }
    }, {
      n: 'evolve',
      s: '{k:v}, {k:(v->v)} -> {k:v}',
      f: evolve,
      ar: 2,
      as: [
        {
          a: 1,
          b: 2
        }, {}
      ],
      eq: {
        a: 1,
        b: 2
      }
    }, {
      n: 'evolve',
      s: '{k:v}, {k:(v->v)} -> {k:v}',
      f: evolve,
      ar: 2,
      as: [
        {
          a: 1,
          b: 2
        }, {
          a: function(v) {
            return v + 1;
          }
        }
      ],
      eq: {
        a: 2,
        b: 2
      }
    }, {
      n: 'ofilter',
      s: '{k:v}, ((k,v) -> Boolean) -> {k:v}',
      f: ofilter,
      ar: 2,
      as: [
        {
          a: 1,
          b: 2,
          c: 3
        }, function(k, v) {
          return k === 'b';
        }
      ],
      eq: {
        b: 2
      }
    }
  ];

  FN_TEST.forEach(function(spec) {
    return describe(spec.n, function() {
      it("has signature " + spec.s, function() {
        return eql(spec.f.apply(spec, spec.as), spec.eq);
      });
      if (spec.ar === spec.as.length) {
        if (spec.ar > 1) {
          it("has a curried variant", function() {
            if (spec.ar === 2) {
              return eql(spec.f(spec.as[1])(spec.as[0]), spec.eq);
            } else if (spec.ar === 3) {
              return eql(spec.f(spec.as[2])(spec.as[1])(spec.as[0]), spec.eq);
            }
          });
        }
      }
      return it("is of arity(" + spec.ar + ")", function() {
        return eql(spec.f.length, spec.ar);
      });
    });
  });

  describe('map', function() {
    var as;
    as = split('abc', '');
    return it('doesnt pass multiple args to map function', function() {
      return map(as, function(v, i, as) {
        eql(i, void 0);
        eql(as, void 0);
        return v;
      });
    });
  });

  describe('fold/fold1/foldr/foldr1', function() {
    var as, fs;
    fs = [fold, fold1, foldr, foldr1];
    as = [0, 1, 2, 3];
    return each(fs, function(f) {
      return it('doesnt pass multiple args to fold function', function() {
        return f(as, (function(p, c, i, as) {
          eql(i, void 0);
          eql(as, void 0);
          return p + c;
        }), 1);
      });
    });
  });

  describe('both', function() {
    var even, gt10, lt102;
    gt10 = even = lt102 = null;
    beforeEach(function() {
      gt10 = spy(gt(10));
      even = spy(function(n) {
        return n % 2 === 0;
      });
      return lt102 = spy(lt(102));
    });
    it('is of arity(2)', function() {
      return eql(arityof(both), 2);
    });
    it('produces a function of arity(1)', function() {
      return eql(arityof(both(I, I, I)), 1);
    });
    it('wraps two functions f, g and invokes both with &&', function() {
      var f;
      f = both(gt10, even);
      eql(f(100, 42), true);
      eql(gt10.callCount, 1);
      eql(gt10.args[0], [100, 42]);
      eql(even.callCount, 1);
      eql(even.args[0], [100, 42]);
      return eql(f(8), false);
    });
    it('wraps moar functions f, g, h and invokes both with &&', function() {
      var f;
      f = both(gt10, even, lt102);
      eql(f(100, 42), true);
      eql(gt10.callCount, 1);
      eql(gt10.args[0], [100, 42]);
      eql(even.callCount, 1);
      eql(even.args[0], [100, 42]);
      eql(lt102.callCount, 1);
      eql(lt102.args[0], [100, 42]);
      return eql(f(102), false);
    });
    return it('is lazy', function() {
      var f, f1, f2;
      f1 = spy(function() {
        return false;
      });
      f2 = spy(function() {
        return true;
      });
      f = both(f1, f2);
      eql(f(), false);
      eql(f1.callCount, 1);
      return eql(f2.callCount, 0);
    });
  });

  describe('either', function() {
    var even, gt10, lt102;
    gt10 = even = lt102 = null;
    beforeEach(function() {
      gt10 = spy(gt(10));
      even = spy(function(n) {
        return n % 2 === 0;
      });
      return lt102 = spy(lt(102));
    });
    it('is of arity(2)', function() {
      return eql(arityof(either), 2);
    });
    it('produces a function of arity(1)', function() {
      return eql(arityof(either(I, I, I)), 1);
    });
    it('wraps two functions f, g and invokes both with ||', function() {
      var f;
      f = either(gt10, even);
      eql(f(8, 42), true);
      eql(gt10.callCount, 1);
      eql(gt10.args[0], [8, 42]);
      eql(even.callCount, 1);
      eql(even.args[0], [8, 42]);
      return eql(f(9), false);
    });
    it('wraps moar functions f, g, h and invokes both with ||', function() {
      var f;
      f = either(gt10, even, lt102);
      eql(f(9, 42), true);
      eql(gt10.args, [[9, 42]]);
      eql(even.args, [[9, 42]]);
      return eql(lt102.args, [[9, 42]]);
    });
    return it('is lazy', function() {
      var f, f1, f2;
      f1 = spy(function() {
        return true;
      });
      f2 = spy(function() {
        return false;
      });
      f = either(f1, f2);
      eql(f(), true);
      eql(f1.callCount, 1);
      return eql(f2.callCount, 0);
    });
  });

  describe('comp', function() {
    var gt10;
    gt10 = null;
    beforeEach(function() {
      return gt10 = spy(gt(10));
    });
    it('is of arity(1)', function() {
      return eql(arityof(comp), 1);
    });
    it('produces a function of arity(1)', function() {
      return eql(arityof(comp(I)), 1);
    });
    it('wraps a function and nots the output', function() {
      var f;
      f = comp(gt10);
      eql(f(12), false);
      eql(gt10.callCount, 1);
      return eql(gt10.args[0], [12]);
    });
    return it('accepts variadic', function() {
      var f, g;
      f = comp((g = spy(I)));
      eql(f(1, 2), false);
      return eql(g.args[0], [1, 2]);
    });
  });

  describe('eql', function() {
    return TYPES.forEach(function(v1, i1) {
      return TYPES.forEach(function(v2, i2) {
        var s1, s2;
        s1 = JSON.stringify(v1.v);
        s2 = JSON.stringify(v2.v);
        if (i1 === i2) {
          return it("equals for " + s1 + ", " + s2, function() {
            return eql(F.eql(v1.v, v2.v), true);
          });
        } else {
          return it("not equals for " + s1 + ", " + s2, function() {
            return eql(F.eql(v1.v, v2.v), false);
          });
        }
      });
    });
  });

  describe('zip', function() {
    describe('based on generic zipwith', function() {
      it('is arity 3', function() {
        return eql(arityof(zipwith), 3);
      });
      it('is curried', function() {
        var f, r;
        f = zipwith(add);
        r = f([1, 2], [3, 4]);
        return eql(r, [4, 6]);
      });
      it('is vararg curried', function() {
        var f, r;
        f = zipwith(add);
        r = f([1, 2], [3, 4], [5, 6]);
        return eql(r, [9, 12]);
      });
      return it('works for strings', function() {
        var r;
        r = zipwith(function() {
          var as;
          as = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
          return join(as, '-');
        })('ab', 'de');
        return eql(r, ['a-d', 'b-e']);
      });
    });
    return describe('to array', function() {
      it('is an array of arrays', function() {
        var r;
        r = zip([1, 2], [3, 4]);
        eql(type(r), 'array');
        eql(type(r[0]), 'array');
        return eql(JSON.stringify(r), '[[1,3],[2,4]]');
      });
      it('is arity 2', function() {
        return eql(arityof(zip), 2);
      });
      it('is curried', function() {
        var r, z;
        z = zip([3, 4]);
        r = z([1, 2]);
        return eql(JSON.stringify(r), '[[1,3],[2,4]]');
      });
      it('is vararg curried', function() {
        var r, z;
        z = zip([5, 6]);
        r = z([1, 2], [3, 4]);
        return eql(JSON.stringify(r), '[[1,3,5],[2,4,6]]');
      });
      return it('handles strings', function() {
        var r;
        r = zip('ab', 'de');
        return eql(JSON.stringify(r), '[["a","d"],["b","e"]]');
      });
    });
  });

  describe('zipobj', function() {
    it('is of arity 2', function() {
      return eql(arityof(zipobj), 2);
    });
    it('makes an object out of keys/values', function() {
      return eql(zipobj(['a', 'b'], [1, 2]), {
        a: 1,
        b: 2
      });
    });
    return it('wants equal length arrays', function() {
      eql(zipobj(['a', 'b'], [1]), {
        a: 1
      });
      return eql(zipobj(['a'], [1, 2]), {
        a: 1
      });
    });
  });

  describe('plift', function() {
    var PTYPES, types;
    PTYPES = [
      {
        v: null,
        t: 'null'
      }, {
        v: 42,
        t: 'number'
      }
    ];
    types = function(f, check) {
      return PTYPES.forEach(function(t) {
        describe("plain(" + t.t + ")", function() {
          return check(function() {
            return f(t.v, t.v);
          });
        });
        return describe("promise(" + t.t + ")", function() {
          return check(function() {
            return f(later(function() {
              return t.v;
            }), t.v);
          });
        });
      });
    };
    describe('with no arg', function() {
      return it('calls fun', function() {
        var f, g;
        f = plift((g = spy(function() {})));
        f();
        return eql(g.args[0].length, 0);
      });
    });
    describe('with one arg', function() {
      var lifted;
      lifted = plift(function(a, av) {
        return [a, av];
      });
      return types(lifted, function(f) {
        var check;
        check = function(arr) {
          return eql(arr[0], arr[1]);
        };
        return it('works', function() {
          var ret;
          ret = f();
          if (ret.then) {
            return ret.then(check);
          } else {
            return check(ret);
          }
        });
      });
    });
    describe('with two args,', function() {
      var lifted;
      lifted = curry(plift(function(a, av, b, bv) {
        return [a, av, b, bv];
      }));
      return types(lifted, function(f) {
        return describe('and', function() {
          return types(f(), function(f) {
            var check;
            check = function(arr) {
              eql(arr[0], arr[1]);
              return eql(arr[2], arr[3]);
            };
            return it('works', function() {
              var ret;
              ret = f();
              if (ret.then) {
                return ret.then(check);
              } else {
                return check(ret);
              }
            });
          });
        });
      });
    });
    describe('with varags', function() {
      var lifted;
      lifted = plift(function() {
        var as;
        as = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
        return [as[0], as[1]];
      });
      return types(lifted, function(f) {
        var check;
        check = function(arr) {
          return eql(arr[0], arr[1]);
        };
        return it('works', function() {
          var ret;
          ret = f();
          if (ret.then) {
            return ret.then(check);
          } else {
            return check(ret);
          }
        });
      });
    });
    return describe('preserves arg order', function() {
      describe('with two args', function() {
        var lifted;
        lifted = plift(function(a, b) {
          return a / b;
        });
        it('works for two plain', function() {
          return eql(lifted(10, 5), 2);
        });
        it('works for first promise', function() {
          return lifted(Q(10), 5).then(function(r) {
            return eql(r, 2);
          });
        });
        return it('works for second promise', function() {
          return lifted(10, Q(5)).then(function(r) {
            return eql(r, 2);
          });
        });
      });
      return describe('with three args', function() {
        var lifted;
        lifted = plift(function(a, b, c) {
          return a / (b * c);
        });
        it('works for two plain', function() {
          return eql(lifted(12, 3, 2), 2);
        });
        it('works for first promise', function() {
          return lifted(Q(12), 3, 2).then(function(r) {
            return eql(r, 2);
          });
        });
        it('works for second promise', function() {
          return lifted(12, Q(3), 2).then(function(r) {
            return eql(r, 2);
          });
        });
        it('works for third promise', function() {
          return lifted(12, 3, Q(2)).then(function(r) {
            return eql(r, 2);
          });
        });
        return it('works for first and third promise', function() {
          return lifted(Q(12), 3, Q(2)).then(function(r) {
            return eql(r, 2);
          });
        });
      });
    });
  });

  describe('converge', function() {
    var add, add3, calc, div10, mul2, mul3, mul4;
    add = function(a, b) {
      return a + b;
    };
    add3 = function(a, b, c) {
      return a + b + c;
    };
    mul2 = mul(2);
    mul3 = mul(3);
    mul4 = mul(4);
    div10 = div(10);
    calc = function(add, div) {
      return add + "|" + div;
    };
    it('is of arity 3', function() {
      return eql(arityof(converge), 3);
    });
    describe('accepts a function that is invoked with the results', function() {
      it('of two functions', function() {
        var fn;
        fn = converge(mul2, mul3, add);
        return eql(fn(2), 10);
      });
      return it('of three functions', function() {
        var fn;
        fn = converge(mul2, mul3, mul4, add3);
        return eql(fn(2), 18);
      });
    });
    it('is a curry', function() {
      var fn;
      fn = converge(add)(mul3)(mul2);
      return eql(fn(2), 10);
    });
    it('curries the resulting function', function() {
      var fn;
      fn = converge((function(a, b) {
        return a + b;
      }), (function(a, b, c) {
        return a + b + c;
      }), add);
      eql(arityof(fn), 3);
      return eql(fn(2)(3)(4), 16);
    });
    it('allows promises as arg', function() {
      var fn;
      fn = converge(add, div10, calc);
      return fn(later(function() {
        return 10;
      }), 2).then(function(v) {
        return eql(v, "12|0.5");
      });
    });
    it('can take promises as result of func step', function() {
      var addl, fn;
      addl = function(a, b) {
        return later(function() {
          return a + b;
        });
      };
      fn = converge(addl, div10, calc);
      return fn(10, 2).then(function(v) {
        return eql(v, "12|0.5");
      });
    });
    it('can pfail as after fn', function() {
      var fn;
      fn = converge(mul2, mul3, pfail(function(err) {
        return "did " + err;
      }));
      return fn(fuze('reject')).then(function(r) {
        return eql(r, 'did reject');
      });
    });
    return it('converges vararg funs', function(done) {
      var a, b, fn;
      a = function() {
        var as;
        as = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
        return as[1];
      };
      b = function() {
        var as;
        as = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
        return as[2];
      };
      fn = converge(a, b, function(a, b) {
        eql(a, 2);
        eql(b, 3);
        return done();
      });
      return fn(1, 2, 3);
    });
  });

  describe('apply', function() {
    return it('applies a function', function() {
      return eql(apply(Math.max)([2, 4, 3]), 4);
    });
  });

  describe('unapply', function() {
    return it('turns positional arguments into indexed', function() {
      return eql(unapply(join(','))(1, 2, 3), '1,2,3');
    });
  });

  describe('iif', function() {
    it('is arity 3', function() {
      return eql(arityof(iif), 3);
    });
    it('produces a curried function which arity is that of c', function() {
      var c, f, fn, t;
      c = function(a, b) {
        return true;
      };
      t = function(a) {
        return 42;
      };
      f = function(a, b, c, d) {};
      fn = iif(c, t, f);
      eql(arityof(fn), 2);
      return eql(fn(2)(1), 42);
    });
    it('is curried', function() {
      var fn1, fn2;
      fn1 = spy(function() {
        return 42;
      });
      fn2 = spy(function() {
        return 43;
      });
      return eql(iif(fn2)(fn1)(I)(1), 42);
    });
    it('applies first branch if truthy', function() {
      var fn, fn1, fn2;
      fn1 = spy(function() {
        return 42;
      });
      fn2 = spy(function() {
        return 43;
      });
      fn = iif(I, fn1, fn2);
      eql(fn(1), 42);
      return eql(fn1.args[0], [1]);
    });
    it('applies second branch if falsey', function() {
      var fn, fn1, fn2;
      fn1 = spy(function() {
        return 42;
      });
      fn2 = spy(function() {
        return 43;
      });
      fn = iif(I, fn1, fn2);
      eql(fn(0), 43);
      return eql(fn2.args[0], [0]);
    });
    it('accepts null first branch', function() {
      var fn, fn2;
      fn2 = spy(function() {
        return 43;
      });
      fn = iif(I, null, fn2);
      return eql(fn(1), void 0);
    });
    it('accepts null second branch', function() {
      var fn, fn1;
      fn1 = spy(function() {
        return 42;
      });
      fn = iif(I, fn1, null);
      return eql(fn(0), void 0);
    });
    it('works for variadic', function() {
      var fn, fn1, fn2, tst;
      tst = spy(I);
      fn1 = spy(function() {
        return 42;
      });
      fn2 = spy(function() {
        return 43;
      });
      fn = iif(tst, fn1, fn2);
      eql(fn(1, 2, 3), 42);
      eql(fn(0, 2, 3), 43);
      eql(tst.args[0], [1, 2, 3]);
      eql(fn1.args[0], [1, 2, 3]);
      return eql(fn2.args[0], [0, 2, 3]);
    });
    return it('accepts a promise arg', function() {
      var fn, fn1, fn2;
      fn1 = function() {
        return 42;
      };
      fn2 = function() {
        return 43;
      };
      fn = iif(I, fn1, fn2);
      return fn(later(function() {
        return 1;
      })).then(function(r) {
        return eql(r, 42);
      });
    });
  });

  describe('maybe', function() {
    it('wraps a function and only invokes it if input is non-falsey', function() {
      var fn;
      fn = maybe(function() {
        return 42;
      });
      eql(fn(null), void 0);
      eql(fn(void 0), void 0);
      eql(fn(0), 42);
      return eql(fn(1), 42);
    });
    it('works for variadic input', function() {
      var fn;
      fn = maybe(function() {
        return 42;
      });
      eql(fn(1, null), void 0);
      eql(fn(1, void 0), void 0);
      eql(fn(1, 0), 42);
      return eql(fn(1, 1), 42);
    });
    it('accepts promises to maybe fn', function() {
      var fn;
      fn = maybe(function() {
        return 42;
      });
      return fn(later(function() {
        return 1;
      })).then(function(r) {
        return eql(r, 42);
      });
    });
    return it('accepts promises for null', function() {
      var fn;
      fn = maybe(function() {
        return 42;
      });
      return fn(later(function() {
        return null;
      })).then(function(r) {
        return eql(r, void 0);
      });
    });
  });

  describe('always', function() {
    it('produces a function that always returns the given value', function() {
      var fn;
      fn = always(42);
      eql(fn(), 42);
      return eql(fn(12345), 42);
    });
    return it('waits for a promise', function() {
      var fn;
      fn = always(42);
      return fn(later(function() {
        return 1;
      })).then(function(r) {
        return eql(r, 42);
      });
    });
  });

  describe('keyval', function() {
    it('makes a key-value pair as an object', function() {
      var o;
      o = keyval('a', 42);
      return eql(o, {
        a: 42
      });
    });
    it('handles null keys', function() {
      var o;
      o = keyval(null, 42);
      return eql(o, {
        "null": 42
      });
    });
    it('handles undefined keys', function() {
      var o;
      o = keyval(void 0, 42);
      return eql(o, {
        undefined: 42
      });
    });
    return it('is curried', function() {
      return eql(keyval(42)('a'), {
        a: 42
      });
    });
  });

  describe('nth', function() {
    it('produces a function that returns the nth argument', function() {
      return eql(nth(1)(1, 2, 3), 2);
    });
    it('produces an arity that of the arg + 1', function() {
      arityof(nth(1), 2);
      return arityof(nth(4), 5);
    });
    return it('produces a curried function', function() {
      var fn;
      fn = nth(2);
      return eql(fn(42)(1)(1), 42);
    });
  });

  describe('at', function() {
    it('is of arity 2', function() {
      return eql(arityof(at), 2);
    });
    it('produces a function that extracts the nth position', function() {
      return eql(at([1, 2, 3], 1), 2);
    });
    it('is curried', function() {
      return eql(at(1)([1, 2, 3]), 2);
    });
    return it('works for strings', function() {
      return eql(at(1)('123'), '2');
    });
  });

  describe('pfail', function() {
    var fn, s;
    fn = s = null;
    beforeEach(function() {
      return fn = pfail(s = spy(function(err) {
        return "failed with " + err;
      }));
    });
    describe('with rejected promise argument', function() {
      return it('is invoked', function() {
        return fn(fuze('reject')).then(function(r) {
          return eql(r, 'failed with reject');
        });
      });
    });
    describe('with multiple rejected promise argument', function() {
      return it('is invoked', function() {
        return fn(fuze('reject 1'), fuze('reject 2')).then(function(r) {
          eql(s.args.length, 1);
          return eql(r, 'failed with reject 2');
        });
      });
    });
    describe('with accepted promise argument', function() {
      return it('is skipped', function() {
        return fn(Q('accept')).then(function(r) {
          return eql(r, 'accept');
        });
      });
    });
    return describe('with non-promise argument', function() {
      it('is skipped', function() {
        return eql(fn(42), 42);
      });
      return it('is skipped with no arg', function() {
        return eql(fn(), void 0);
      });
    });
  });

  describe('pall', function() {
    describe('with array of plain values', function() {
      return it('returns an array', function() {
        return eql(pall([1, 2, 3]), [1, 2, 3]);
      });
    });
    describe('with array of mixed values/promises', function() {
      return it('resolves to array of values', function() {
        return pall([
          1, later(function() {
            return 2;
          }), later(function() {
            return 3;
          })
        ]).then(function(as) {
          return eql(as, [1, 2, 3]);
        });
      });
    });
    return describe('with array where some value rejects', function() {
      return it('is rejected with same rejection', function() {
        return pall([1, fuze(42), later(3)]).fail(function(err) {
          return eql(err, 42);
        });
      });
    });
  });

  describe('once', function() {
    it('invokes function once', function() {
      var fn, s;
      fn = once(s = spy(function() {
        return 42;
      }));
      fn();
      fn();
      return eql(s.args.length, 1);
    });
    return it('keeps returning same value', function() {
      var fn;
      fn = once(function(a) {
        return a + 41;
      });
      eql(fn(1), 42);
      return eql(fn(2), 42);
    });
  });

  describe('cond', function() {
    it('is arity 1', function() {
      return eql(arityof(cond), 1);
    });
    it('works for one condition', function() {
      var fn;
      fn = cond([[lt(10), always(42)]]);
      return eql(fn(8), 42);
    });
    it('returns undefined if no match', function() {
      var fn;
      fn = cond([[lt(10), always(42)]]);
      return eql(fn(11), void 0);
    });
    it('invokes function with same args as cond', function() {
      var fn, s;
      fn = cond([
        [
          lt(10), (s = spy(function() {
            return 42;
          }))
        ]
      ]);
      eql(fn(8, 7), 42);
      return eql(s.args[0], [8, 7]);
    });
    return it('choses first cond that matches', function() {
      var fn;
      fn = cond([[lt(10), always(42)], [lt(12), always(43)]]);
      return eql(fn(11), 43);
    });
  });

}).call(this);

//# sourceMappingURL=fnuc-test.js.map
