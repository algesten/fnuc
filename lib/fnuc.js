// Generated by CoffeeScript 1.10.0
(function() {
  var I, _defprop, _filter, _fold, _foldr, _ispfail, _nary, _pliftall, _toString, _uncurry, aand, add, all, always, any, apply, arity, arityof, asprop, at, binary, both, builtin, call, clone, comp, compose, concat, cond, contains, converge, curry, curry2, curry2var, curry3, curry3var, div, drop, each, either, eq, eql, evolve, exports, expose, filter, firstfn, flip, fold, fold1, foldr, foldr1, get, gt, gte, has, head, iif, index, indexfn, isdef, isplain, join, keys, keyval, last, lastfn, lcase, len, lt, lte, map, match, max, maybe, merge, min, mixin, mod, mul, ncurry, nnot, nth, ofilter, omap, once, oor, pall, partial, partialr, pfail, pick, pipe, plift, replace, reverse, search, set, shallow, slice, sort, split, sub, tail, take, tap, ternary, trim, type, typeis, ucase, unapply, unary, uniq, uniqfn, values, zip, zipobj, zipwith,
    slice1 = [].slice;

  I = function(a) {
    return a;
  };

  builtin = I.bind.bind(I.call);

  _toString = builtin(Object.prototype.toString);

  shallow = function(a) {
    var i, q, r, ref, ref1, t;
    if (!a) {
      return a;
    }
    r = null;
    if ((ref = (t = type(a))) === 'string' || ref === 'number' || ref === 'boolean' || ref === 'symbol') {
      r = a;
    } else if (t === 'array') {
      r = [];
      for (i = q = 0, ref1 = a.length; q < ref1; i = q += 1) {
        r[i] = a[i];
      }
    } else if (t === 'date') {
      r = new Date(a.getTime());
    } else if (isplain(a)) {
      r = merge({}, a);
    } else {
      throw new TypeError("Can't shallow " + a);
    }
    return r;
  };

  clone = function(a) {
    var i, k, q, ref, s, v;
    if (!a) {
      return a;
    }
    s = shallow(a);
    if (type(a) === 'array') {
      for (i = q = 0, ref = a.length; q < ref; i = q += 1) {
        s[i] = clone(s[i]);
      }
    } else if (isplain(s)) {
      for (k in s) {
        v = s[k];
        s[k] = clone(v);
      }
    }
    return s;
  };

  isplain = (function() {
    var iscons, isobject, isobjobj, isprot, isprotobj;
    isobject = function(o) {
      return !!o && typeof o === 'object';
    };
    isobjobj = function(o) {
      return isobject(o) && Object.prototype.toString.call(o) === '[object Object]';
    };
    iscons = function(o) {
      return typeof o.constructor === 'function';
    };
    isprot = function(o) {
      return isobjobj(o.constructor.prototype);
    };
    isprotobj = function(o) {
      return o.constructor.prototype.hasOwnProperty('isPrototypeOf');
    };
    return function(o) {
      return isobjobj(o) && iscons(o) && isprot(o) && isprotobj(o);
    };
  })();

  isdef = function(o) {
    return o != null;
  };

  type = function(a) {
    return _toString(a).slice(8, -1).toLowerCase();
  };

  head = function(a) {
    return a[0];
  };

  tail = function(a) {
    return a.slice(1);
  };

  last = function(a) {
    return a[a.length - 1];
  };

  _nary = function(n, fn) {
    switch (n) {
      case 0:
        return function() {
          return fn.apply(null, arguments);
        };
      case 1:
        return function(a) {
          return fn.apply(null, arguments);
        };
      case 2:
        return function(a, b) {
          return fn.apply(null, arguments);
        };
      case 3:
        return function(a, b, c) {
          return fn.apply(null, arguments);
        };
      case 4:
        return function(a, b, c, d) {
          return fn.apply(null, arguments);
        };
      case 5:
        return function(a, b, c, d, e) {
          return fn.apply(null, arguments);
        };
      case 6:
        return function(a, b, c, d, e, f) {
          return fn.apply(null, arguments);
        };
      case 7:
        return function(a, b, c, d, e, f, g) {
          return fn.apply(null, arguments);
        };
      case 8:
        return function(a, b, c, d, e, f, g, h) {
          return fn.apply(null, arguments);
        };
      case 9:
        return function(a, b, c, d, e, f, g, h, i) {
          return fn.apply(null, arguments);
        };
      case 10:
        return function(a, b, c, d, e, f, g, h, i, j) {
          return fn.apply(null, arguments);
        };
    }
  };

  arity = function(fn, n) {
    if (arguments.length === 1) {
      n = fn;
      return function(fn) {
        return _nary(n, fn);
      };
    } else {
      return _nary(n, fn);
    }
  };

  arityof = function(f) {
    if (typeof f === 'function') {
      return f.length;
    }
  };

  unary = function(fn) {
    return function(a) {
      return fn.apply(null, arguments);
    };
  };

  binary = function(fn) {
    return function(a, b) {
      return fn.apply(null, arguments);
    };
  };

  ternary = function(fn) {
    return function(a, b, c) {
      return fn.apply(null, arguments);
    };
  };

  _defprop = function(t, n, v) {
    Object.defineProperty(t, n, {
      value: v
    });
    return t;
  };

  ncurry = function(n, v, f, as) {
    var l, nf;
    if (as == null) {
      as = [];
    }
    if (typeof n !== 'number') {
      throw new Error("Bad ncurry");
    }
    l = n - as.length;
    nf = _nary(l, function() {
      var bs, cs;
      bs = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
      cs = (bs.length <= l ? bs : (v ? bs : bs.slice(0, l))).concat(as);
      if (cs.length < n) {
        return ncurry(n, v, f, cs);
      } else {
        return f.apply(null, cs);
      }
    });
    return _defprop(nf, '__fnuc_curry', function() {
      if (as.length === 0) {
        return f;
      } else {
        return partialr.apply(null, [f].concat(slice1.call(as)));
      }
    });
  };

  curry2 = function(f) {
    var f2;
    return _defprop(f2 = function(a, b) {
      var n;
      n = arguments.length;
      if (n === 0) {
        return f2;
      } else if (n === 1) {
        b = a;
        return function(a) {
          return f(a, b);
        };
      } else {
        return f(a, b);
      }
    }, '__fnuc_curry', function() {
      return f;
    });
  };

  curry2var = function(f) {
    var f2;
    return _defprop(f2 = function(a, b) {
      var n;
      n = arguments.length;
      if (n === 0) {
        return f2;
      } else if (n === 1) {
        b = a;
        return function(a) {
          return f.apply(null, slice1.call(arguments).concat([b]));
        };
      } else {
        return f.apply(null, arguments);
      }
    }, '__fnuc_curry', function() {
      return f;
    });
  };

  curry3 = function(f) {
    var f2;
    return _defprop(f2 = function(a, b, c) {
      var n;
      n = arguments.length;
      if (n === 0) {
        return f2;
      } else if (n === 1) {
        c = a;
        return curry2(function(a, b) {
          return f(a, b, c);
        });
      } else if (n === 2) {
        c = b;
        b = a;
        return function(a) {
          return f(a, b, c);
        };
      } else {
        return f(a, b, c);
      }
    }, '__fnuc_curry', function() {
      return f;
    });
  };

  curry3var = function(f) {
    var f2;
    return _defprop(f2 = function(a, b, c) {
      var n;
      n = arguments.length;
      if (n === 0) {
        return f2;
      } else if (n === 1) {
        c = a;
        return curry2var(function(a, b) {
          return f.apply(null, slice1.call(arguments).concat([c]));
        });
      } else if (n === 2) {
        c = b;
        b = a;
        return function(a) {
          return f.apply(null, slice1.call(arguments).concat([b], [c]));
        };
      } else {
        return f.apply(null, arguments);
      }
    }, '__fnuc_curry', function() {
      return f;
    });
  };

  curry = function(f) {
    var n;
    n = arityof(f);
    if (n < 2) {
      return f;
    } else if (n === 2) {
      return curry2(f);
    } else if (n === 3) {
      return curry3(f);
    } else {
      return ncurry(n, false, f);
    }
  };

  _uncurry = function(f) {
    if (f.__fnuc_curry) {
      return f.__fnuc_curry();
    } else {
      return f;
    }
  };

  partial = function() {
    var as, f, fn, n;
    f = arguments[0], as = 2 <= arguments.length ? slice1.call(arguments, 1) : [];
    f = _uncurry(f);
    n = arityof(f) - as.length;
    fn = function() {
      var bs;
      bs = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
      return f.apply(null, as.concat(bs));
    };
    if (n <= 0) {
      return fn;
    } else {
      return curry(_nary(n, fn));
    }
  };

  partialr = function() {
    var as, f, fn, n;
    f = arguments[0], as = 2 <= arguments.length ? slice1.call(arguments, 1) : [];
    f = _uncurry(f);
    n = arityof(f) - as.length;
    fn = function() {
      var bs;
      bs = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
      return f.apply(null, bs.slice(0, n).concat(as));
    };
    if (n <= 0) {
      return fn;
    } else {
      return curry(_nary(n, fn));
    }
  };

  flip = function(f) {
    var g;
    if (f.__fnuc_flip) {
      return f.__fnuc_flip;
    }
    g = curry(_nary(arityof(f), function() {
      var as;
      as = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
      return _uncurry(f).apply(null, as.reverse());
    }));
    return _defprop(g, '__fnuc_flip', f);
  };

  compose = function() {
    var fs;
    fs = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
    fs = _pliftall(fs);
    return ncurry(arityof(last(fs)), true, fold1(fs, function(f, g) {
      return function() {
        var as;
        as = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
        return f(g.apply(null, as));
      };
    }));
  };

  pipe = function() {
    var ar, fn, fs;
    fs = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
    fs = _pliftall(fs);
    fn = foldr1(fs, function(f, g) {
      return function() {
        var as;
        as = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
        return f(g.apply(null, as));
      };
    });
    ar = arityof(head(fs));
    if (ar >= 2) {
      return ncurry(ar, true, fn);
    } else {
      return _nary(ar, fn);
    }
  };

  converge = curry3var(function() {
    var after, ar, fn, fs, q;
    fs = 2 <= arguments.length ? slice1.call(arguments, 0, q = arguments.length - 1) : (q = 0, []), after = arguments[q++];
    fs = _pliftall(fs);
    after = plift(after);
    ar = apply(Math.max)(map(fs, arityof));
    fn = function() {
      var args, context;
      args = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
      context = this;
      return after.apply(context, map(fs, function(fn) {
        return fn.apply(context, args);
      }));
    };
    if (ar >= 2) {
      return ncurry(ar, true, fn);
    } else {
      return _nary(ar, fn);
    }
  });

  typeis = curry2(function(a, s) {
    return type(a) === s;
  });

  tap = curry2(function(a, f) {
    f(a);
    return a;
  });

  call = curry2var(function() {
    var as, fn;
    fn = arguments[0], as = 2 <= arguments.length ? slice1.call(arguments, 1) : [];
    return fn.apply(null, as);
  });

  apply = function(fn) {
    return function(as) {
      return fn.apply(null, as);
    };
  };

  unapply = function(fn) {
    return function() {
      var as;
      as = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
      return fn(as);
    };
  };

  iif = curry3(function(c, t, f) {
    return curry(_nary(arityof(c), plift(function() {
      var as;
      as = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
      if (c.apply(null, as)) {
        return typeof t === "function" ? t.apply(null, as) : void 0;
      } else {
        return typeof f === "function" ? f.apply(null, as) : void 0;
      }
    })));
  });

  maybe = function(fn) {
    return unary(plift(function() {
      var as;
      as = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
      if (as.every(isdef)) {
        return fn.apply(null, as);
      }
    }));
  };

  always = function(v) {
    return plift(function() {
      return v;
    });
  };

  nth = function(n) {
    return curry(_nary(n + 1, function() {
      var as;
      as = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
      return as[n];
    }));
  };

  once = function(fn) {
    var ran, ret;
    ran = ret = null;
    return function() {
      var as;
      as = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
      if (ran) {
        return ret;
      } else {
        ran = true;
        return ret = fn.apply(null, as);
      }
    };
  };

  at = curry2(function(as, n) {
    return as[n];
  });

  cond = function(cs) {
    return curry(_nary(arityof(cs[0][0]), function() {
      var as, fn, len1, q, ref;
      as = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
      for (q = 0, len1 = cs.length; q < len1; q++) {
        ref = cs[q], cond = ref[0], fn = ref[1];
        if (cond.apply(null, as)) {
          return fn.apply(null, as);
        }
      }
      return void 0;
    }));
  };

  all = curry2var(builtin(Array.prototype.every));

  any = curry2var(builtin(Array.prototype.some));

  contains = curry2(function(as, a) {
    return index(as, a) >= 0;
  });

  concat = curry2var(function() {
    var as, ref;
    as = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
    return (ref = []).concat.apply(ref, as);
  });

  each = curry2var(builtin(Array.prototype.forEach));

  filter = curry2(function(as, f) {
    var len1, q, r, ri, v;
    r = [];
    ri = -1;
    for (q = 0, len1 = as.length; q < len1; q++) {
      v = as[q];
      if (f(v)) {
        r[++ri] = v;
      }
    }
    return r;
  });

  _filter = function(as, f) {
    var i, len1, q, r, ri, v;
    r = [];
    ri = -1;
    for (i = q = 0, len1 = as.length; q < len1; i = ++q) {
      v = as[i];
      if (f(v, i)) {
        r[++ri] = v;
      }
    }
    return r;
  };

  _fold = function(as, f, acc, arrInit) {
    var i, l;
    i = 0;
    l = as.length;
    if (arrInit) {
      acc = as[i++];
    }
    for (;i < l; ++i) { acc = f(acc,as[i]) };
    return acc;
  };

  _foldr = function(as, f, acc, arrInit) {
    var i;
    i = as.length;
    if (arrInit) {
      acc = as[--i];
    }
    while (i--) { acc = f(acc,as[i]) };
    return acc;
  };

  fold = curry3(function(as, f, v) {
    return _fold(as, f, v, false);
  });

  fold1 = curry2(function(as, f) {
    return _fold(as, f, null, true);
  });

  foldr = curry3(function(as, f, v) {
    return _foldr(as, f, v, false);
  });

  foldr1 = curry2(function(as, f) {
    return _foldr(as, f, null, true);
  });

  index = curry2(function(as, v) {
    var i, l;
    l = as.length;
    i = -1;
    while (++i < l) { if (as[i] === v) return i };
    return -1;
  });

  indexfn = curry2(function(as, fn) {
    var i, l;
    l = as.length;
    i = -1;
    while (++i < l) { if (fn(as[i])) return i };
    return -1;
  });

  firstfn = curry2(function(as, fn) {
    var i, l, r;
    r = null;
    l = (as != null ? as.length : void 0) || 0;
    if (!l) {
      return null;
    }
    i = 0;
    for (;i < l; ++i) { if (fn(r = as[i])) return r };
    return null;
  });

  lastfn = curry2(function(as, fn) {
    var i, r;
    r = null;
    i = (as != null ? as.length : void 0) - 1;
    if (!(i < (as != null ? as.length : void 0))) {
      return null;
    }
    for (;i >= 0; --i) { if (fn(r = as[i])) return r };
    return null;
  });

  join = curry2var(builtin(Array.prototype.join));

  map = curry2(function(as, f) {
    var i, l, r;
    r = Array(as.length);
    l = as.length;
    i = 0;
    for (;i < l; ++i) { r[i] = f(as[i]) };
    return r;
  });

  reverse = unary(builtin(Array.prototype.reverse));

  sort = curry2(builtin(Array.prototype.sort));

  uniqfn = curry2(function(as, fn) {
    var fned;
    if (!as) {
      return as;
    }
    fned = map(as, fn);
    return _filter(as, function(v, i) {
      return fned.indexOf(fned[i]) === i;
    });
  });

  uniq = function(as) {
    if (!as) {
      return as;
    }
    return _filter(as, function(v, i) {
      return as.indexOf(v) === i;
    });
  };

  merge = function() {
    var k, len1, o, os, q, t, v;
    t = arguments[0], os = 2 <= arguments.length ? slice1.call(arguments, 1) : [];
    for (q = 0, len1 = os.length; q < len1; q++) {
      o = os[q];
      for (k in o) {
        v = o[k];
        t[k] = v;
      }
    }
    return t;
  };

  mixin = curry2var(function() {
    var os;
    os = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
    return merge.apply(null, [{}].concat(slice1.call(os)));
  });

  plift = (function() {
    var firstthen, isthenable, promapply, thenbind;
    isthenable = function(p) {
      var ref;
      if (!p) {
        return false;
      }
      if ((ref = typeof p) !== 'object' && ref !== 'function') {
        return false;
      }
      return typeof p.then === 'function';
    };
    thenbind = function(p) {
      return p.then.bind(p);
    };
    firstthen = function(as) {
      var t;
      t = firstfn(isthenable)(as);
      if (t) {
        return thenbind(t);
      } else {
        return null;
      }
    };
    promapply = function(errfn) {
      return function(pfn, parg) {
        var fn, onacc, onrej;
        fn = null;
        onacc = function(arg) {
          if (errfn) {
            return arg;
          } else {
            return fn(arg);
          }
        };
        onrej = function(err) {
          if (errfn) {
            return errfn(err);
          } else {
            throw err;
          }
        };
        return pfn.then(function(_fn) {
          fn = _fn;
          return parg;
        }).then(onacc, onrej);
      };
    };
    return function(f) {
      var nf;
      if (f.__fnuc_plift) {
        return f;
      }
      nf = curry(_nary(arityof(f), function() {
        var alws, as, currfn, failfn, t0;
        as = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
        t0 = firstthen(as);
        if (t0) {
          currfn = ncurry(as.length, false, f);
          alws = function() {
            return currfn;
          };
          failfn = _ispfail(f) ? once(f) : null;
          return foldr(as, promapply(failfn), t0(alws, alws));
        } else {
          if (_ispfail(f)) {
            return as != null ? as[0] : void 0;
          } else {
            return f.apply(null, as);
          }
        }
      }));
      return _defprop(nf, '__fnuc_plift', true);
    };
  })();

  _pliftall = map(plift);

  pfail = function(f) {
    return plift(_defprop(f, '__fnuc_fail', true));
  };

  _ispfail = function(fn) {
    return !!(fn != null ? fn.__fnuc_fail : void 0);
  };

  pall = (function() {
    var args;
    args = plift(unapply(I));
    return function(as) {
      return args.apply(null, as);
    };
  })();

  has = curry2(function(o, k) {
    return o.hasOwnProperty(k);
  });

  get = curry2(function(o, k) {
    return o[k];
  });

  set = curry3(function(o, k, v) {
    o[k] = v;
    return o;
  });

  keys = function(o) {
    return Object.keys(o);
  };

  values = function(o) {
    return map(keys(o), function(k) {
      return o[k];
    });
  };

  ofilter = curry2(function(o, f) {
    var k, r, v;
    r = {};
    for (k in o) {
      v = o[k];
      if (f(k, v)) {
        r[k] = v;
      }
    }
    return r;
  });

  omap = curry2(function(o, f) {
    var k, r, v;
    r = {};
    for (k in o) {
      v = o[k];
      r[k] = f(k, v);
    }
    return r;
  });

  evolve = curry2(function(o, t) {
    return omap(o, function(k, v) {
      if (has(t, k)) {
        return t[k](v);
      } else {
        return v;
      }
    });
  });

  pick = curry2var(function() {
    var as, k, len1, o, q, r;
    o = arguments[0], as = 2 <= arguments.length ? slice1.call(arguments, 1) : [];
    if (typeis(as[0], 'array')) {
      as = as[0];
    }
    r = {};
    for (q = 0, len1 = as.length; q < len1; q++) {
      k = as[q];
      r[k] = o[k];
    }
    return r;
  });

  keyval = curry2(function(k, v) {
    var o;
    set(o = {}, k, v);
    return o;
  });

  split = curry2(builtin(String.prototype.split));

  match = curry2(builtin(String.prototype.match));

  replace = curry3(builtin(String.prototype.replace));

  search = curry2(builtin(String.prototype.search));

  trim = unary(builtin(String.prototype.trim));

  ucase = unary(builtin(String.prototype.toUpperCase));

  lcase = unary(builtin(String.prototype.toLowerCase));

  slice = curry3(function(s, m, n) {
    return s.slice(m, n);
  });

  drop = curry2(function(s, n) {
    return s.slice(n);
  });

  take = curry2(function(s, n) {
    return s.slice(0, n);
  });

  len = function(t) {
    return t.length;
  };

  add = curry2var(function() {
    var as;
    as = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
    return fold1(as, function(a, b) {
      return a + b;
    });
  });

  sub = curry2var(function() {
    var as;
    as = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
    return fold1(as, function(a, b) {
      return a - b;
    });
  });

  mul = curry2var(function() {
    var as;
    as = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
    return fold1(as, function(a, b) {
      return a * b;
    });
  });

  div = curry2var(function() {
    var as;
    as = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
    return fold1(as, function(a, b) {
      return a / b;
    });
  });

  mod = curry2var(function() {
    var as;
    as = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
    return fold1(as, function(a, b) {
      return a % b;
    });
  });

  min = curry2var(function() {
    var as;
    as = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
    return Math.min.apply(Math, as);
  });

  max = curry2var(function() {
    var as;
    as = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
    return Math.max.apply(Math, as);
  });

  gt = curry2(function(a, b) {
    return a > b;
  });

  gte = curry2(function(a, b) {
    return a >= b;
  });

  lt = curry2(function(a, b) {
    return a < b;
  });

  lte = curry2(function(a, b) {
    return a <= b;
  });

  eq = (function() {
    var _;
    _ = {};
    return curry2var(function() {
      var as;
      as = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
      return fold1(as, function(a, b) {
        if (a === b) {
          return a;
        } else {
          return _;
        }
      }) !== _;
    });
  })();

  aand = curry2var(function() {
    var as;
    as = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
    return fold1(as, function(a, b) {
      return !!a && !!b;
    });
  });

  oor = curry2var(function() {
    var as;
    as = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
    return fold1(as, function(a, b) {
      return !!a || !!b;
    });
  });

  nnot = function(a) {
    return !a;
  };

  both = curry2var(function() {
    var fs;
    fs = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
    return unary(function() {
      var as, i, l;
      as = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
      i = 0;
      l = fs.length;
      for (;i < l; ++i) { if (!fs[i].apply(null,as)) { return false } };
      return true;
    });
  });

  either = curry2var(function() {
    var fs;
    fs = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
    return unary(function() {
      var as, i, l;
      as = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
      i = 0;
      l = fs.length;
      for (;i < l; ++i) { if (fs[i].apply(null,as)) { return true } };
      return false;
    });
  });

  comp = function(f) {
    return unary(function() {
      var as;
      as = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
      return !f.apply(null, as);
    });
  };

  zipwith = curry3var(function() {
    var as, f, i, ml, n, q, ref, results, u;
    as = 2 <= arguments.length ? slice1.call(arguments, 0, q = arguments.length - 1) : (q = 0, []), f = arguments[q++];
    ml = apply(min)(map(as, len));
    results = [];
    for (i = u = 0, ref = ml; u < ref; i = u += 1) {
      results.push(f.apply(null, (function() {
        var ref1, results1, w;
        results1 = [];
        for (n = w = 0, ref1 = as.length; w < ref1; n = w += 1) {
          results1.push(as[n][i]);
        }
        return results1;
      })()));
    }
    return results;
  });

  zip = zipwith(function() {
    var as;
    as = 1 <= arguments.length ? slice1.call(arguments, 0) : [];
    return as;
  });

  zipobj = (function() {
    var fn;
    fn = function(obj) {
      return zipwith(function(k, v) {
        return set(obj, k, v);
      });
    };
    return function(ks, vs) {
      var ret;
      fn(ret = {})(ks, vs);
      return ret;
    };
  })();

  eql = (function() {
    var eqarr, eqobj, eqplain, eqtype, sortstr;
    eqtype = function(a, b) {
      return type(a) === type(b);
    };
    eqarr = function(a, b) {
      var i, q, ref;
      if (a.length !== b.length) {
        return false;
      }
      for (i = q = 0, ref = a.length; q < ref; i = q += 1) {
        if (!eql(a[i], b[i])) {
          return false;
        }
      }
      return true;
    };
    eqplain = function(a, b) {
      return isplain(a) && isplain(b);
    };
    sortstr = sort(function(s1, s2) {
      return s1.localeCompare(s2);
    });
    eqobj = function(a, b) {
      var k, ka, len1, q;
      ka = sortstr(keys(a));
      if (!eqarr(ka, sortstr(keys(b)))) {
        return false;
      }
      for (q = 0, len1 = ka.length; q < len1; q++) {
        k = ka[q];
        if (!eql(a[k], b[k])) {
          return false;
        }
      }
      return true;
    };
    return curry2(function(a, b) {
      if (a === b) {
        return true;
      }
      return (both(eqtype, (function() {
        switch (type(a)) {
          case 'object':
            return both(eqplain, eqobj);
          case 'array':
            return eqarr;
          default:
            return function() {
              return false;
            };
        }
      })()))(a, b);
    });
  })();

  exports = {
    shallow: shallow,
    clone: clone,
    type: type,
    typeis: typeis,
    isplain: isplain,
    isdef: isdef,
    arity: arity,
    arityof: arityof,
    unary: unary,
    binary: binary,
    ternary: ternary,
    curry: curry,
    flip: flip,
    compose: compose,
    pipe: pipe,
    I: I,
    partial: partial,
    partialr: partialr,
    tap: tap,
    converge: converge,
    apply: apply,
    iif: iif,
    maybe: maybe,
    always: always,
    nth: nth,
    once: once,
    unapply: unapply,
    cond: cond,
    call: call,
    merge: merge,
    mixin: mixin,
    has: has,
    get: get,
    set: set,
    keys: keys,
    values: values,
    pick: pick,
    evolve: evolve,
    ofilter: ofilter,
    omap: omap,
    eql: eql,
    keyval: keyval,
    concat: concat,
    head: head,
    tail: tail,
    last: last,
    fold: fold,
    fold1: fold1,
    foldr: foldr,
    foldr1: foldr1,
    each: each,
    map: map,
    filter: filter,
    all: all,
    any: any,
    join: join,
    reverse: reverse,
    sort: sort,
    index: index,
    indexfn: indexfn,
    contains: contains,
    uniq: uniq,
    uniqfn: uniqfn,
    zip: zip,
    zipwith: zipwith,
    len: len,
    firstfn: firstfn,
    lastfn: lastfn,
    zipobj: zipobj,
    at: at,
    split: split,
    match: match,
    replace: replace,
    search: search,
    trim: trim,
    ucase: ucase,
    lcase: lcase,
    slice: slice,
    drop: drop,
    take: take,
    add: add,
    sub: sub,
    mul: mul,
    div: div,
    mod: mod,
    min: min,
    max: max,
    gt: gt,
    gte: gte,
    lt: lt,
    lte: lte,
    eq: eq,
    aand: aand,
    oor: oor,
    nnot: nnot,
    either: either,
    both: both,
    comp: comp,
    plift: plift,
    pfail: pfail,
    pall: pall
  };

  exports.and = exports.aand;

  exports.or = exports.oor;

  exports.not = exports.nnot;

  asprop = function(fn) {
    return {
      value: fn,
      enumerable: true,
      configurable: false,
      writable: false
    };
  };

  expose = (function() {
    var guard;
    guard = '__fnuc';
    return function(exp) {
      return function() {
        var as, fns, ks, obj, ofexp, props, valid;
        obj = arguments[0], as = 2 <= arguments.length ? slice1.call(arguments, 1) : [];
        if (obj[guard]) {
          return;
        }
        ofexp = partial(get, exp);
        valid = function(as) {
          return map(as, function(a) {
            if (ofexp(a)) {
              return a;
            } else {
              throw "Not found: " + a;
            }
          });
        };
        ks = as.length ? valid(as) : keys(exp);
        fns = map(ofexp)(ks);
        props = zipobj(ks, map(asprop)(fns));
        Object.defineProperties(obj, props);
        Object.defineProperty(obj, guard, asprop(I));
        return exp;
      };
    };
  })();

  exports.expose = expose(exports);

  if (typeof module === 'object') {
    module.exports = exports;
  } else if (typeof define === 'function' && define.amd) {
    define(function() {
      return exports;
    });
  } else {
    this.F = exports;
  }

}).call(this);

//# sourceMappingURL=fnuc.js.map
